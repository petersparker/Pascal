Function GetConnectorHandle(Name: String): Handle;Var	TheHandle: Handle;		Procedure PickConnector(ConHandle: Handle);	Begin		SetName(ConHandle, GetRField(ConHandle, 'Connector Rec', 'Name'))	End;Begin	TheHandle:= NIL;	ForEachObject(PickConnector, ('Connector Rec'.'Name' = Name));	TheHandle := GetObject(Name);	DelName(Name);	If GetType(TheHandle) = 15 Then	Begin		If (Round(Eval(TheHandle, (R In ['Panel Info']))) = 1)    Then			SetName(TheHandle, (GetRField(TheHandle, 'Panel 1 Rec', 'Name')))		Else			SetName(TheHandle, (GetRField(TheHandle, 'Device Rec', 'Name')))	End;	GetConnectorHandle := TheHandleEnd;Procedure CreateVoltageDropRecord;Begin	NewField('VDrop Rec', 'VDrop', 'NIL', 4, 0);	NewField('VDrop Rec', 'Length', 'NIL', 4, 0);	NewField('VDrop Rec', 'Wire Gauge', 'NIL', 4, 0);	NewField('VDrop Rec', 'Temperature', 'NIL', 4, 0);End;Function GetOPF(CurHandle: Handle): Real;Var	Gauge: Integer;	Temperature: Real;Begin	Message('Begin GetOPF');	Gauge := Round(Str2Num(GetRField(CurHandle, 'VDrop Rec', 'Wire Gauge')));	Temperature := (Str2Num(GetRField(CurHandle, 'VDrop Rec', 'Temperature')) - 32) * (5 / 9);	Case (Gauge) Of		12: GetOPF := (1 / 6530) * (12.6) * (1 + (0.003233 * (Temperature - 75)));		14: GetOPF := (1 / 4110) * (12.6) * (1 + (0.003233 * (Temperature - 75)));		16: GetOPF := (1 / 2580) * (12.6) * (1 + (0.003233 * (Temperature - 75)));		18: GetOPF := (1 / 1620) * (12.6) * (1 + (0.003233 * (Temperature - 75)));		Otherwise			AlrtDialog(Concat('The gauge ', Gauge, ' is not defined. Call tech-support.'))	EndEnd;Function GetLength(PreHandle, CurHandle: Handle): Real;Var	Length: Real;	PreName, Path: String;Begin	Message('Begin GetLength');	Length := 0;	PreName := GetRField(PreHandle, 'Connector Rec', 'Name');	Path := GetRField(CurHandle, 'Connector Rec', 'Path');	While (Pos(PreName, Path) = 0) Do	Begin		If ((Copy(GetRField(PreHandle, 'Connector Rec', 'Name'),1, 1) = ConduitPrefix) And (GetType(PreHandle) = 2)) Then			Length := Length + Str2Num(GetRField(PreHandle, 'Conduit Rec', 'Length'));		PreHandle := GetConnectorHandle(GetRField(PreHandle, 'Connector Rec', 'BLink'));		PreName := GetRField(PreHandle, 'Connector Rec', 'Name')	End;	While (CurHandle <> PreHandle) Do	Begin		If ((Copy(GetRField(CurHandle, 'Connector Rec', 'Name'),1, 1) = ConduitPrefix) And (GetType(CurHandle) = 2)) Then			Length := Length + Str2Num(GetRField(CurHandle, 'Conduit Rec', 'Length'));		CurHandle := GetConnectorHandle(GetRField(CurHandle, 'Connector Rec', 'BLink'));	End;	GetLength := Length;	Message('End GetLength')End;Function SameCircuit(CurHandle, PreHandle: Handle): Boolean;Begin	SameCircuit := (GetRField(CurHandle, 'Device Rec', 'Prefix') = GetRField(Prehandle, 'Device Rec', 'Prefix')) & 	(GetRField(CurHandle, 'Device Rec', 'Circuit') = GetRField(Prehandle, 'Device Rec', 'Circuit'))End;Function PathLength(CurHandle, PreHandle: Handle): Integer;Var	Node, Length: Integer;	Prefix, ZoneID: String;	ConHandle: Handle;Begin	Message('Begin PathLength');	Node := Str2Num(GetRField(CurHandle, 'Device Rec', 'Node'));	Prefix := GetRField(CurHandle, 'Device Rec', 'Prefix');	ZoneID := GetRField(CurHandle, 'Device Rec', 'Circuit');	Length := 0;	ConHandle := GetConnectorHandle(GetRField(CurHandle, 'Connector Rec', 'BLink'));	Length := GetLength(PreHandle, CurHandle);	SetRField(CurHandle, 'VDrop Rec', 'Length', Num2Str(0, Length));	PathLength := LengthEnd;Function GetVoltage(CurHandle: Handle): Real;Var	PanHandle: Handle;Begin	Message('Begin GetVoltage');	PanHandle := GetObject(GetRField(CurHandle, 'Device Rec', 'Panel'));	GetVoltage := Str2Num(GetRField(PanHandle, 'Panel Info', 'Voltage'));	Message('End GetVoltage')End;Function PathVDrop(CurHandle: Handle): Real;Var	PreHandle: Handle;	Node: Integer;	Prefix, ZoneID, PanName: String;	VDrop: Real;Begin	Message('Begin PathVDrop');	Node := Str2Num(GetRField(CurHandle, 'Device Rec', 'Node')) - 1;	Prefix := GetRField(CurHandle, 'Device Rec', 'Prefix');	ZoneID := GetRField(CurHandle, 'Device Rec', 'Circuit');	PanName := GetRField(CurHandle, 'Device Rec', 'Panel');	VDrop := 0;	If (Node > 1) Then	Begin		PreHandle := GetObject(Concat(PanName, '.', Prefix, '-', ZoneID, '-', Node));		If Not((GetType(PreHandle) = 15) And (Round(Eval(PreHandle, (R In ['Panel Info']))) = 1)) Then			Repeat				If SameCircuit(CurHandle, PreHandle) Then					VDrop := VDrop + Str2Num(GetRField(PreHandle, 'VDrop Rec', 'VDrop'));				PreHandle := GetObject(Concat(PanName, '.', Prefix, '-', ZoneID, '-', Node));				Node := Node - 1;			Until(Node = 0)	End;	PathVDrop := VDropEnd;Function CheckVDrop(CurHandle: Handle): Boolean;Var	Length, UnitAmps, OhmsPerFoot, SystemVoltage, VoltageDrop, PercentDrop, TotalPercentDrop: Real;	Node: Integer;	Panel, Prefix, Circuit: String;	PreHandle: Handle;Begin	Panel := GetRField(CurHandle, 'Device Rec', 'Panel');	Prefix := GetRField(CurHandle, 'Device Rec', 'Prefix');	Circuit := GetRField(CurHandle, 'Device Rec', 'Circuit');	Node := Str2Num(GetRField(CurHandle, 'Device Rec', 'Node'));	PreHandle := CurHandle;	Length := 0;	TotalPercentDrop := 0;	OhmsPerFoot := GetOPF(CurHandle);	SystemVoltage := GetVoltage(CurHandle);	While (Not((GetType(PreHandle) = 15) And (Round(Eval(PreHandle, (R In ['Panel Info']))) = 1)) And (Node <> 0)) And (PreHandle <> NIL) Do	Begin		PreHandle := GetObject(Concat(Panel, '.', Prefix, '-', Circuit, '-', Num2Str(0, Node)));		Node := Node - 1	End;	Message(GetName(PreHandle));	Repeat		Node := Node + 1;		If (GetObject(Concat(Panel, '.', Prefix, '-', Circuit, '-', Num2Str(0, Node))) <> NIL) Then			PreHandle := GetObject(Concat(Panel, '.', Prefix, '-', Circuit, '-', Num2Str(0, Node)));		UnitAmps := Str2Num(GetRField(PreHandle, 'Signal Info', 'Alarm1'));		Message(Node, '. Unit Amps = ', UnitAmps);		Length := Length + (Str2Num(GetRField(PreHandle, 'VDrop Rec', 'Length')) / 12);		Message(Node, '. Length = ', Length);		VoltageDrop := UnitAmps * OhmsPerFoot * Length * 2;		Message(Node, '. Voltage Drop = ', VoltageDrop);		PercentDrop := (VoltageDrop / SystemVoltage) * 100;		Message(Node, '. Percent Drop = ', PercentDrop, '%');		TotalPercentDrop := TotalPercentDrop + PercentDrop;		Message(Node, '. Total Percent Drop = ', TotalPercentDrop, '%');		Message('Name = ', GetName(PreHandle));		Wait(1);	Until(PreHandle = CurHandle);	Message(Num2Str(2, TotalPercentDrop), '%');	Wait(1);	CheckVDrop := TrueEnd;Procedure CalculateVDrop(CurHandle: Handle);Var	VoltsDropped, PercentDrop, TotPercentDrop, OhmsPerFoot, SystemVoltage: Real;	Length, TotLength: Integer;Begin	Message('Begin CalculateVDrop');	TotLength := PathLength(CurHandle, PreHandle);	Length := (Str2Num(GetRField(CurHandle, 'VDrop Rec', 'Length'))) / 12;	OhmsPerFoot := GetOPF(CurHandle);	SystemVoltage := GetVoltage(CurHandle);	VoltsDropped := Str2Num(GetRField(CurHandle, 'Signal Info', 'Alarm1')) * OhmsPerFoot * Length * 2;	PercentDrop := (VoltsDropped / SystemVoltage) * 100;	SetRField(CurHandle, 'VDrop Rec', 'VDrop', Concat(Num2Str(3,PercentDrop), '%'));	TotPercentDrop := PathVDrop(CurHandle) + PercentDrop;	Message('Voltage Drop = 2 * ', Length, ' * ', OhmsPerFoot, ' * ', GetRField(CurHandle, 'Signal Info', 'Alarm1'), ' = ', VoltsDropped)End;Procedure VDWorksheet(DevHandle: Handle);Const	kCenter		=	4;	kGeneral		=	1;	kSprdWidth	=	9;Var	WSIndex, RowCounter, ColumnCounter, Voltage, Length, Temperature, NumOfNodes: Integer;	PanelName, ZoneID, Prefix, WireGuage: String;Begin	PanelName := GetRField(DevHandle, 'Device Rec', 'Panel');	ZoneID := GetRField(DevHandle, 'Device Rec', 'Circuit');	Prefix := GetRField(DevHandle, 'Device Rec', 'Prefix');	NumOfNodes := Str2Num(GetRField(DevHandle, 'Device Rec','Node'));	TextSize(12);	If (GetObject(Concat(Prefix, '-', ZoneID, ' VDrop')) <> NIL) Then		DelName(Concat(Prefix, '-', ZoneID, ' VDrop'));	NewSprdSheet(Concat(Prefix, '-', ZoneID, ' VDrop'), 0, 0, NumOfNodes + 14, 10, False, False);{Begin Title Row (#1)}	SprdAlign(kCenter);	SprdFormat(0, 0, '', '');	SprdBorder(False, False, True, False);	For ColumnCounter := 1 To 4 Do	Begin		SprdWidth(kSprdWidth);		LoadCell(1, ColumnCounter, '')	End;	SprdWidth(kSprdWidth);	LoadCell(1, 5, 'Voltage Drop Calculations');	For ColumnCounter := 6 To 10 Do	Begin		SprdWidth(kSprdWidth);		LoadCell(1, ColumnCounter, '')	End;{End Title Row (#1)}{Row #2 is empty.}{Begin Row #3}	SprdAlign(kGeneral);	SprdBorder(True, False, True, False);	LoadCell(3, 1, 'Zone Number');	SprdBorder(True, False, True, True);	LoadCell(3, 2, '');	SprdAlign(kCenter);	LoadCell(3, 3, Concat('SZ-', ZoneID));{End Row #3}{Begin Row #4}	SprdAlign(kGeneral);	SprdBorder(True, False, True, False);	LoadCell(4, 1, 'Wire Gauge (AWG)');	SprdBorder(True, False, True, True);	LoadCell(4, 2, '');	SprdAlign(kCenter);	LoadCell(4, 3, GetRField(DevHandle, 'VDrop Rec', 'Wire Gauge'));	SprdAlign(kGeneral);	LoadCell(4, 4, 'AWG');	SprdBorder(True, True, True, True);	LoadCell(4, 9, '=If(C4 < 13, 6530, If(C4 < 15, 4110, If(C4 < 17, 2580, If(C4 < 19, 1620, 0))))');	LoadCell(4, 10, 'Circ Mils');{End Row #4}{Begin Row #5}	SprdBorder(True, False, True, False);	LoadCell(5, 1, 'Voltage');	SprdBorder(True, False, True, True);	LoadCell(5, 2, '');	SprdAlign(kCenter);	LoadCell(5, 3, GetRField(GetObject(PanelName),'Panel Info', 'Voltage'));	SprdAlign(kGeneral);	LoadCell(5, 4, 'Volts');	SprdFormat(1, 5, '', '');	SprdBorder(True, True, True, True);	LoadCell(5, 9, '=((1 / I4) * 12.6) * (1 + (0.00323 * (I6 - 75)))');	LoadCell(5, 10, 'Ohms/ Foot');{End Row #5}{Begin Row #6}	SprdBorder(True, False, True, False);	LoadCell(6, 1, 'Temperature');	SprdBorder(True, False, True, True);	LoadCell(6, 2, '');	SprdAlign(kCenter);	SprdFormat(0, 0, '', '');	LoadCell(6, 3, EvalStr(DevHandle, ('VDrop Rec'.'Temperature')));	SprdAlign(kGeneral);	LoadCell(6, 4, 'Fahrenheit');	SprdFormat(1, 1, '', '');	SprdBorder(True, True, True, True);	LoadCell(6, 9, '=(C6-32)*(5/9)');	LoadCell(6, 10, 'Centigrade');{End Row #6}{Begin Row #8}	SprdAlign(kCenter);	SprdBorder(True, False, False, True);	LoadCell(8, 1, 'Node');	LoadCell(8, 2, 'Conductor');	LoadCell(8, 3, 'Unit');	LoadCell(8, 4, 'Total');	LoadCell(8, 5, 'AWG');	LoadCell(8, 6, 'Circular');	LoadCell(8, 7, 'Ohms');	LoadCell(8, 8, 'Voltage');	LoadCell(8, 9, 'Percent');	LoadCell(8, 10, 'Cumulative');{End Row #8}{Begin Row #9}	SprdBorder(False, False, False, True);	LoadCell(9, 1, 'Reference');	LoadCell(9, 2, 'Length');	LoadCell(9, 3, 'Amperes');	LoadCell(9, 4, 'Amperes');	LoadCell(9, 5, 'Size');	LoadCell(9, 6, 'Mils');	LoadCell(9, 7, 'Per Foot');	LoadCell(9, 8, 'Drop');	LoadCell(9, 9, 'Drop');	LoadCell(9, 10, '% Drop');{End Row #9}{Begin Row #10}	SprdBorder(False, False, True, True);	LoadCell(10, 1, '');	LoadCell(10, 2, '(Feet)');	For ColumnCounter := 3 To 10 Do		LoadCell(10, ColumnCounter, '');{End Row #10}{Begin Row #11 - i}	For RowCounter := 10 To (NumOfNodes + 9) Do	Begin		DevHandle := GetObject(Concat(PanelName, '.', Prefix, '-', ZoneID, '-', RowCounter - 9));		If (DevHandle <> NIL) Then		Begin			SprdBorder(True, True, True, True);			SprdAlign(kCenter);			SprdFormat(0, 0, '', '');			LoadCell(RowCounter, 1, Num2Str(0, RowCounter - 9));			LoadCell(RowCounter, 2, Num2Str(0, Str2Num(GetRField(DevHandle, 'VDrop Rec', 'Length')) / 12));			SprdAlign(kGeneral);			SprdFormat(1, 3, '', '');			LoadCell(RowCounter, 3, GetRField(DevHandle, 'Signal Info', 'Alarm1'));			LoadCell(RowCounter, 4, Concat('=C', RowCounter, '+D', RowCounter + 1));			SprdAlign(kCenter);			SprdFormat(0, 0, '', '');			LoadCell(RowCounter, 5, ('=$C$4'));			LoadCell(RowCounter, 6, ('=I$4'));			SprdFormat(1, 5, '', '');			LoadCell(RowCounter, 7, ('=I$5'));			SprdAlign(kGeneral);			SprdFormat(1, 3, '', '');			LoadCell(RowCounter, 8, Concat('=2*B', RowCounter, '*D', RowCounter, '*G', RowCounter));			SprdFormat(1, 2, '', '%');			LoadCell(RowCounter, 9, Concat('=H', RowCounter, '/$C$5*100'));			If RowCounter = 10 Then				LoadCell(RowCounter, 10, Concat('=I', RowCounter))			Else				LoadCell(RowCounter, 10, Concat('=I', RowCounter, '+J', RowCounter - 1))		End	End;{End Row #11 - i}{Begin Row #i + 1}	SprdBorder(True, True, True, True);	SprdAlign(kCenter);	SprdFormat(0, 0, '', '');	LoadCell(RowCounter + 1, 1, 'Totals');	LoadCell(RowCounter + 1, 2, Concat('=Sum(B10..B', RowCounter, ')'));	SprdAlign(kGeneral);	SprdFormat(1, 3, '', '');	LoadCell(RowCounter + 1, 3, Concat('=Sum(C10..C', RowCounter, ')'));	LoadCell(RowCounter + 1, 4, '=D10');	SprdAlign(kCenter);	LoadCell(RowCounter + 1, 7, 'Totals');	SprdAlign(kGeneral);	LoadCell(RowCounter + 1, 8, Concat('=Sum(H10..H', RowCounter, ')'));	SprdFormat(1, 2, '', '%');	LoadCell(RowCounter + 1, 9, Concat('=Sum(I10..I', RowCounter, ')'));	LoadCell(RowCounter + 1, 10, Concat('=J', RowCounter - 1));{End Row #i + 1}{Begin Row #i + 3}	SprdBorder(True, False, True, False);	For ColumnCounter := 1 To 3 Do		LoadCell(RowCounter + 3, ColumnCounter, '');	SprdBorder(True, False, True, True);	SprdAlign(3);	LoadCell(RowCounter + 3, 4, 'Total Voltage Drop');	SprdAlign(kGeneral);	SprdFormat(1, 3, '', '');	LoadCell(RowCounter + 3, 5, Concat('=H', RowCounter + 1));	LoadCell(RowCounter + 3, 6, 'Volts');{End Row #i + 3}{Begin Row #i + 4}	SprdBorder(True, False, True, False);	For ColumnCounter := 1 To 3 Do		LoadCell(RowCounter + 4, ColumnCounter, '');	SprdBorder(True, False, True, True);	SprdAlign(3);	LoadCell(RowCounter + 4, 4, 'Total Percentage Voltage Drop in Circuit');	SprdAlign(kGeneral);	SprdFormat(1, 2, '', '%');	LoadCell(RowCounter + 4, 5, Concat('=I', RowCounter + 1));	LoadCell(RowCounter + 4, 6, 'Percent');{End Row #i}End;