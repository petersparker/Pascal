Function CoordinatesMatch(X1, Y1, X2, Y2: Real): Boolean;Begin	CoordinatesMatch := ((X1 = X2) And (Y1 = Y2))End;Function ConnectorName(ConHandle: Handle): String;Begin	ConnectorName := GetRField(ConHandle, 'Connector Rec', 'Name')End;Function HandleIsNIL(TheHandle: Handle): Boolean;Begin	HandleIsNIL := (TheHandle = NIL)End;Function NameExists(TheName: String): Boolean;Begin	NameExists := Not(HandleIsNIL(GetObject(TheName)))End;Function Increment(Num, IncVal: Integer): Integer;Begin	Increment := (Num + IncVal)End;Function LineIsVertical(X1, Y1, X2, Y2: Real): Boolean;Begin	LineIsVertical := (Abs(Y2 - Y1) >= Abs(X2 - X1))End;Function ObjectIsSymbol(TheHandle: Handle): Boolean;Begin	ObjectIsSymbol := (GetType(TheHandle) = 15)End;Function ObjectIsLine(TheHandle: Handle): Boolean;Begin	ObjectIsLine := (GetType(TheHandle) = 2)End;Function EmptyName(TheHandle: Handle): Boolean;Begin	EmptyName := ((GetName(TheHandle) = '') Or (GetName(TheHandle) = 'none'))End;Function ObjectsMatch(PreHandle, CurHandle: Handle): Boolean;Begin	ObjectsMatch := (CurHandle = PreHandle)End;Function DeviceIsAccessory(DevHandle: Handle): Boolean;Begin	DeviceIsAccessory := (ObjectIsSymbol(DevHandle)) And (Round(Eval(DevHandle, (R In ['Accessory Info']))) = 1)End;Function DeviceIsDetection(DevHandle: Handle): Boolean;Begin	DeviceIsDetection := (ObjectIsSymbol(DevHandle)) And (Round(Eval(DevHandle, (R In ['Detection Info']))) = 1)End;Function DeviceIsPanel(DevHandle: Handle): Boolean;Begin	DeviceIsPanel := (ObjectIsSymbol(DevHandle)) And (Round(Eval(DevHandle, (R In ['Panel Info']))) = 1)End;Function DeviceIsSignal(DevHandle: Handle): Boolean;Begin	DeviceIsSignal := (ObjectIsSymbol(DevHandle)) And (Round(Eval(DevHandle, (R In ['Signal Info']))) = 1)End;Procedure SetHandle(Var Handle2: Handle; Handle1: Handle);Begin	Handle2 := Handle1End;Function GetConnector(Name: String): Handle;Var	H: Handle;		Procedure PickConnector(ConHandle: Handle);	Begin		SetName(ConHandle, (ConnectorName(ConHandle)))	End;Begin	H:= NIL;	ForEachObject(PickConnector, ('Connector Rec'.'Name' = Name));	H := GetObject(Name);	DelName(Name);	If ObjectIsSymbol(H) Then	Begin		If DeviceIsPanel(H) Then			SetName(H, (GetRField(H, 'Panel 1 Rec', 'Name')))		Else			SetName(H, (GetRField(H, 'Device Rec', 'Name')))	End;	GetConnector := HEnd;Function ObjectIsConduit(TheHandle: Handle): Boolean;Begin	ObjectIsConduit := ((Copy(ConnectorName(TheHandle),1, 1) = ConduitPrefix) And ObjectIsLine(TheHandle))End;Function GetBLink(ConHandle: Handle): Handle;Begin	GetBLink := GetConnector(GetRField(ConHandle, 'Connector Rec', 'BLink'))End;Function InPath(PreHandle, CurHandle: Handle): Boolean;Begin	While ((PreHandle <> CurHandle) And Not(HandleIsNil(CurHandle))) Do		CurHandle:= GetBLink(CurHandle);	If (PreHandle = CurHandle) Then		InPath := True	Else		InPath := FalseEnd;Procedure SetCoordinates(Var X2, Y2: Real; X1, Y1: Real);Begin	X2 := X1;	Y2 := Y1End;Procedure DeleteObjectName(ObjectName: String);Begin	If NameExists(ObjectName) Then		DelName(ObjectName)End;Procedure OriginSetup;Var	OriginX, OriginY: Real;Begin	GetOrigin(OriginX, OriginY);	If ((OriginX <> 0) | (OriginY <> 0)) Then		SetOrigin((0 - OriginX), (0 - OriginY))End;Procedure OKCancelProcess(Var DialogueDone, Cancel: Boolean; ItemID: Integer);Begin	DialogueDone := True;	If (ItemID = 1) Then		Cancel := False	Else		Cancel := TrueEnd;