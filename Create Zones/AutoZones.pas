Procedure AutoZones;Const	PeriodKey = 46;	PKey = 112;	CKey = 99;	VKey = 118;	ZKey = 122;	EscapeKey = 27;	PanTool = -130;	ZoomInTool = -131;	ZoomOutTool = -132;	ConduitPrefix = 'C';Var	WireGauge, Temperature, Zone: Integer;	Prefix, WireID: String;	ZoneIndex	: Integer;	PreX,	PreY,	CurX,	CurY,	DevX,	DevY	: Real;	WireType,	CircuitType,	DevPrefix	: String;	ShiftWasHit,	OptionWasHit,	KeyWasHit,	CommandWasHit,	PWasHit,	CWasHit,	VWasHit,	ZWasHit,	DoneWithCircuit,	HaveFirstPoint	: Boolean;	PreHandle,	CurHandle	: Handle;	{$Include VoltageDrop.XXT}{$Include Standard.XXT}{$Include DetectionDialogue.XXT}{$Include SignalDialogue.XXT}	Function ValidZone(PanHandle, DevHandle: Handle; ZoneID: Integer): Boolean;	Begin		Message('Begin ValidZone');				Message('End ValidZone')	End;	Function DeviceIsUsed(DevHandle: Handle): Boolean;	Begin		DeviceIsUsed := ((ObjectIsSymbol(DevHandle)) & (Not(EmptyName(DevHandle))))	End;	Function DeviceType(DevHandle: Handle): String;	Begin		Message('Begin DeviceType');		If (Round(Eval(DevHandle, (R In ['Detection Info']))) = 1) Then			DeviceType := 'Detection'		Else If (Round(Eval(DevHandle, (R In ['Signal Info']))) = 1) Then			DeviceType := 'Signal';		Message('End DeviceType')	End;	Function GetZoneType(DevHandle: Handle): String;	Begin		Message('Begin GetZoneType');		If (Round(Eval(DevHandle, (R In ['Detection Info']))) = 0) Then			GetZoneType := 'Detection'		Else If (Round(Eval(DevHandle, (R In ['Signal Info']))) = 0) Then			GetZoneType := 'Signal';		Message('End GetZoneType')	End;	Function KeyWord(DevHandle: Handle): String;	Begin		Message('Begin KeyWord');		If (Round(Eval(DevHandle, (R In ['Detection Info']))) = 1) Then			KeyWord := GetRField(DevHandle, 'Detection Info', 'KeyWord')		Else If (Round(Eval(DevHandle, (R In ['Signal Info']))) = 1) Then			KeyWord := GetRField(DevHandle, 'Signal Info', 'KeyWord')		Else If (Round(Eval(DevHandle, (R In ['Panel Info']))) = 1) Then			KeyWord := GetRField(DevHandle, 'Panel Info', 'KeyWord')		Else If (Round(Eval(DevHandle, (R In ['Accessory Info']))) = 1) Then			KeyWord := GetRField(DevHandle, 'Accessory Info','KeyWord')		Else		Begin			KeyWord := 'X';			AlrtDialog('This device was never declared.');			AlrtDialog('Keyword???')		End;		Message('End KeyWord')	End;	Function Addressable(DevHandle: Handle): Boolean;	Var		IsAddressable: String;	Begin		Message('Begin Addressable');		If (Round(Eval(DevHandle, (R In ['Detection Info']))) = 1) Then			IsAddressable := GetRField(DevHandle, 'Detection Info', 'Addressable')		Else If (Round(Eval(DevHandle, (R In ['Signal Info']))) = 1) Then			IsAddressable := 'False'		Else If (Round(Eval(DevHandle, (R In ['Panel Info']))) = 1) Then			IsAddressable := GetRField(DevHandle, 'Panel Info', 'Addressable')		Else If (Round(Eval(DevHandle, (R In ['Accessory Info']))) = 1) Then			IsAddressable := GetRField(DevHandle, 'Accessory Info', 'Addressable')		Else		Begin			IsAddressable := 'False';			AlrtDialog('This device was never declared.');			AlrtDialog('Addressable???')		End;		If (IsAddressable = 'True') Then			Addressable := True		Else			Addressable := False;		Message('End Addressable')	End;	Function DeviceTypeMatch(PreHandle, CurHandle: Handle): Boolean;	Begin		Message('Begin DeviceTypeMatch');		If (DeviceIsSignal(PreHandle) And DeviceIsSignal(CurHandle)) Or		(Addressable(PreHandle) And (Addressable(CurHandle) Or DeviceIsDetection(CurHandle))) Or		((KeyWord(PreHandle)  = KeyWord(CurHandle)) And ((KeyWord(PreHandle)  <> 'X') Or (KeyWord(CurHandle)  <> 'X'))) Then			DeviceTypeMatch := True		Else			DeviceTypeMatch := False;		Message('End DeviceTypeMatch')	End;	Function GetCommon(PreHandle, CurHandle: Handle): Handle;	Begin		Message('Begin GetCommon');		While Not(InPath(PreHandle, CurHandle)) Do			PreHandle:= GetBLink(PreHandle);		GetCommon := PreHandle;		Message('End GetCommon')	End;	Function LastPanelNumber: Integer;	Var		PanIndex: Integer;	Begin		Message('Begin LastPanelNumber');		PanIndex := 0;		Repeat			PanIndex := Increment(PanIndex, 1);		Until(HandleIsNil(GetObject(Concat('P-', Num2Str(0, PanIndex)))));		LastPanelNumber := PanIndex;		Message('End LastPanelNumber')	End;	Procedure Setup;	Begin		Message('Begin Setup');		GridLines(48);		PenGrid(6);		PenSize(20);		PenFore(56797, 0, 0);		Message('End Setup')	End;	Procedure CreateEOLRecord;	Begin		Message('Begin CreateEOLRecord');		NewField('EOL Rec', 'Name', 'NIL', 4, 0);		NewField('EOL Rec', 'Device', 'NIL', 4, 0);		Message('End CreateEOLRecord')	End;	Procedure CreateDeviceRecord;	Begin		Message('Begin CreateDeviceRecord');		NewField('Device Rec', 'Name', 'NIL', 4, 0);		NewField('Device Rec', 'Prefix', 'NIL', 4, 0);		NewField('Device Rec', 'Circuit', 'NIL', 4, 0);		NewField('Device Rec', 'Node', '0', 1, 0);		NewField('Device Rec', 'Wire ID', 'NIL', 4, 0);		NewField('Device Rec', 'EOL', 'False', 4, 0);		NewField('Device Rec', 'Panel', 'NIL', 4, 0);		Message('End CreateDeviceRecord')	End;	Procedure CreatePanelRecord(PanHandle: Handle; PanIndex: Integer);	Var		DetZones, SigZones, Index, ZoneIndex: Integer;		PanRecName: String;	Begin		Message('Begin CreatePanelRecord');		PanRecName := Concat('Panel ', Num2Str(0, PanIndex), ' Rec');		NewField(PanRecName, 'Name', Concat('P-', Num2Str(0, PanIndex)), 4, 0);		DetZones := Str2Num(GetRField(PanHandle, 'Panel Info', 'Detection Zones'));		SigZones := Str2Num(GetRField(PanHandle, 'Panel Info', 'Signal Zones'));		If (DetZones > 0) Then			For Index := 1 To DetZones Do				NewField(PanRecName, Concat('DFLink', Num2Str(0, Index)), 'NIL', 4, 0);		If (SigZones > 0) Then			For Index := 1 To SigZones Do				NewField(PanRecName, Concat('SFLink', Num2Str(0, Index)), 'NIL', 4, 0);		NewField(PanRecName, 'KFLink', 'NIL', 4, 0);		NewField(PanRecName, 'Temperature', '21', 4, 0);		Message('End CreatePanelRecord')	End;	Procedure GetUserInput(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real; Var DoneWithCircuit: Boolean);	Var		GotInput: Boolean;		Left, Top, Right, Bottom: Real;		KeyHit: Integer;	Begin		Message('Begin GetUserInput');		ShiftWasHit := False;		CommandWasHit := False;		OptionWasHit := False;		GotInput := False;		SetCursor(LgCrossC);		Repeat		Until((KeyDown(KeyHit) And ((KeyHit = PeriodKey) Or (KeyHit = EscapeKey) Or (KeyHit = PKey) Or (KeyHit = ZKey))) Or MouseDown(CurX, CurY));		CommandWasHit := Command;		OptionWasHit := Option;		PWasHit := (KeyHit = PKey);		CWasHit := (KeyHit = CKey);		VWasHit := (KeyHit = VKey);		ZWasHit := (KeyHit = ZKey);		DoneWithCircuit := (((KeyHit = PeriodKey) And CommandWasHit) Or (KeyHit = EscapeKey));		If Not(ZWasHit) Then		Begin			SetHandle(PreHandle, CurHandle);			SetCoordinates(PreX, PreY, CurX, CurY);			CurHandle := PickObject(CurX, CurY)		End;		Message('End GetUserInput')	End;	Procedure DoUndo(Var PreHandle, CurHandle: Handle);	Var		CurName, TextName, WireID: String;		BLinkHandle: Handle;		NumOfFLinks, Index, Counter, WireNum: Integer;	Begin		Message('Begin DoUndo');		CurName:= GetName(CurHandle);		WireID := GetRField(CurHandle, 'Device Rec', 'Wire ID');			NumOfFLinks := Round(Str2Num(GetRField(PreHandle, 'Connector Rec', 'FLinks')));		Message(CurName, ', ', GetName(PreHandle));		Wait(1);		BLinkHandle := CurHandle;		If Not(Addressable(CurHandle))  Then			Repeat				Message('Blink = ', GetRField(CurHandle, 'Connector Rec', 'BLink'));				BLinkHandle := GetConnector(GetRField(BLinkHandle, 'Connector Rec', 'BLink'));				If ObjectIsConduit(BLinkHandle) Then				Begin					WireNum := Str2Num(GetRField(BLinkHandle, 'Conduit Rec', WireID));					SetRField(BLinkHandle, 'Conduit Rec', WireID,  Num2Str(0, WireNum - 1))				End;			Until(BLinkHandle = PreHandle);				SetRField(CurHandle, 'Device Rec', 'Name', 'NIL');		SetRField(CurHandle, 'Device Rec', 'Prefix', 'NIL');		SetRField(CurHandle, 'Device Rec', 'Circuit', 'NIL');		SetRField(CurHandle, 'Device Rec', 'Node', '0');		SetRField(CurHandle, 'Device Rec', 'Wire ID', 'NIL');		SetRField(CurHandle, 'Device Rec', 'EOL', 'False');		SetRField(CurHandle, 'Device Rec', 'Panel', 'NIL');		If (DeviceType(CurHandle) = 'Signal') Then		Begin			SetRField(CurHandle, 'VDrop Rec', 'VDrop', 'NIL');			SetRField(CurHandle, 'VDrop Rec', 'Length', 'NIL');			SetRField(CurHandle, 'VDrop Rec', 'Wire Gauge', 'NIL');			SetRFIeld(CurHandle, 'VDrop Rec', 'Temperature', 'NIL')		End;			DSelectAll;		TextName := Concat(CurName, '.Text');		SelectObj(N = TextName);		DeleteObjs;		DelName(TextName);			DelName(CurName);		CurHandle := PreHandle;		Message('End DoUndo')	End;	Procedure PlaceDeviceName(DevHandle: Handle);	Var		X, Y: Real;		DevText, TextName: String;		TextHandle: Handle;		Index: Integer;	Begin		Message('Begin PlaceDeviceName');		Index := 1;		DevText := GetName(DevHandle);		Message('Name = ', DevText);		While (Copy(DevText, Index, 1) <> '.') Or (Index = Len(DevText)) Do			Index := Index + 1;		DevText := Copy(DevText, Index + 1, Len(DevText) - Index);		Message('Name = ', DevText);		GetSymLoc(DevHandle, X, Y);		TextFont(20);		TextSize(9);		TextJust(1);		TextVerticalAlign(1);		TextOrigin(X + 24, Y - 24);		BeginText;			DevText		EndText;		TextHandle := LNewObj;		SetName(TextHandle, Concat(GetName(DevHandle), ' Text'));		Message('End PlaceDeviceName')	End;	Procedure GetCircuitInfo(Var WireID, Prefix: String);	Begin		Message('Begin GetCircuitInfo');		WireID := StrDialog('Enter the wire type:', WireID);		Prefix := StrDialog('Enter the circuit prefix:', Prefix);		Redraw;		Message('End GetCircuitInfo')	End;	Procedure AddWireToConduit(ConHandle: Handle; WireType: String);	Var		WireNumber: Integer;	Begin		Message('Begin AddWireToConduit');		WireNumber := Str2Num(GetRField(ConHandle, 'Conduit Rec', WireType));		WireNumber := Increment(WireNumber, 1);		SetRField(ConHandle, 'Conduit Rec', WireType, Num2Str(0, WireNumber));		Message('End AddWireToConduit')	End;	Procedure AddWireToPath(PreHandle, CurHandle: Handle; WireType: String);	Var		BLinkHandle, ComHandle: Handle;	Begin		Message('Begin AddWireToPath');		SetHandle(BLinkHandle, CurHandle);		If (InPath(PreHandle, CurHandle)) Then		Begin			While (BLinkHandle <> PreHandle) Do			Begin				If (ObjectIsConduit(GetBLink(BLinkHandle))) Then					If Not(Addressable(CurHandle)) Or ((Addressable(GetObject(GetRField(CurHandle, 'Device Rec', 'Panel')))) 					And (Str2Num(GetRField(GetBLink(BLinkHandle), 'Conduit Rec', WireType)) = 0)) Then						AddWireToConduit(GetBLink(BLinkHandle), WireType);				SetHandle(BLinkHandle, GetBLink(BLinkHandle));			End		End		Else		Begin			SetHandle(ComHandle, GetCommon(PreHandle, CurHandle));			While (GetBLink(BLinkHandle) <> ComHandle) Do			Begin				If (ObjectIsConduit(GetBLink(BLinkHandle))) Then					If Not(Addressable(CurHandle)) Or ((Addressable(GetObject(GetRField(CurHandle, 'Device Rec', 'Panel')))) 					And (Str2Num(GetRField(GetBLink(BLinkHandle), 'Conduit Rec', WireType)) = 0)) Then						AddWireToConduit(GetBLink(BLinkHandle), WireType);				SetHandle(BLinkHandle, GetBLink(BLinkHandle));			End;			While (GetBLink(PreHandle) <> ComHandle) Do			Begin				If (ObjectIsConduit(GetBLink(PreHandle))) Then					If Not(Addressable(CurHandle)) Or ((Addressable(GetObject(GetRField(CurHandle, 'Device Rec', 'Panel')))) 					And (Str2Num(GetRField(GetBLink(BLinkHandle), 'Conduit Rec', WireType)) = 0)) Then						AddWireToConduit(GetBLink(PreHandle), WireType);				PreHandle:= GetBLink(PreHandle);			End		End;		Message('End AddWireToPath')	End;	Procedure SetDeviceRec(CurHandle, PreHandle: Handle; WireID, Prefix: String; ZoneIndex: Integer);	Var		Name, Panel: String;		Node: Integer;	Begin		Message('Begin SetDeviceRec');		If DeviceIsPanel(PreHandle) Then			Panel := GetName(PreHandle)		Else			Panel := GetRField(PreHandle, 'Device Rec', 'Panel');		If Addressable(PreHandle) Or DeviceIsPanel(PreHandle) Then			Node := 1		Else			Node := Increment(Eval(PreHandle, ('Device Rec'.'Node')), 1);		Name := Concat(Panel, '.', Prefix, '-', Num2Str(0, ZoneIndex), '-', Num2Str(0, Node));		SetName(CurHandle, Name);		SetRField(CurHandle, 'Device Rec', 'Name', Name);		SetRField(CurHandle, 'Device Rec', 'Prefix', Prefix);		SetRField(CurHandle, 'Device Rec', 'Circuit', Num2Str(0, ZoneIndex));		SetRField(CurHandle, 'Device Rec', 'Node', Num2Str(0, Node));		SetRField(CurHandle, 'Device Rec', 'Panel', Panel);		SetRField(CurHandle, 'Device Rec', 'Wire ID', WireID);		PlaceDeviceName(CurHandle);		Message('End SetDeviceRec')	End;	Procedure PanelSetup(PanHandle: Handle);	Var		PanIndex: Integer;		PanRecName: String;	Begin		Message('Begin PanelSetup');		PanIndex := LastPanelNumber;		CreatePanelRecord(PanHandle, PanIndex);		PanRecName := Concat('Panel ', Num2Str(0, PanIndex), ' Rec');		SetRecord(PanHandle, PanRecName);		SetName(PanHandle, Concat('P-', Num2Str(0, PanIndex)));		Message('End PanelSetup')	End;	Procedure DoPanel(PreHandle, CurHandle: Handle);	Begin		Message('Begin DoPanel');		Wait(1);		If (EmptyName(CurHandle)) Then			PanelSetup(CurHandle);		Message('End DoPanel')	End;	Procedure SearchPanel(PanHandle, DevHandle: Handle; Var ZoneIndex: Integer);	Var		Zones: Integer;		RecName: String;			Procedure SearchForZone(PanHandle: Handle; Prefix, RecName: String; NumOfZones: Integer; Var ZoneIndex: Integer);		Var			FieldName: String;			GotZone: Boolean;		Begin			Message('Begin SearchForZone');			GotZone := False;			While Not(GotZone) And (ZoneIndex <> NumOfZones) Do			Begin				ZoneIndex := Increment(ZoneIndex, 1);				FieldName := Concat(Prefix, 'FLink', Num2Str(0, ZoneIndex));				If (GetRField(PanHandle, RecName, FieldName) = 'NIL') Then					GotZone := True			End;			If Not(GotZone) Then				ZoneIndex := 1;			Message('End SearchForZone')		End;		Begin		Message('Begin SearchPanel');		ZoneIndex := 0;		RecName := Concat('Panel ', Copy(GetName(PanHandle), 3, Len(GetName(PanHandle)) - 2),' Rec');		If (DeviceIsDetection(DevHandle)) Then		Begin			Zones := Str2Num(GetRField(PanHandle, 'Panel Info', 'Detection Zones'));			SearchForZone(PanHandle, 'D', RecName, Zones, ZoneIndex)		End		Else If (DeviceIsSignal(DevHandle)) Then		Begin			Zones := Str2Num(GetRField(PanHandle, 'Panel Info', 'Signal Zones'));			SearchForZone(PanHandle, 'S', RecName, Zones, ZoneIndex)		End;		Message('End SearchPanel')	End;	Procedure SetPanelFLink(PanHandle: Handle; ZoneIndex: Integer; FLinkName, DevType: String);	Var		RecName: String;	Begin		Message('Begin SetPanelFLink');		RecName := Concat('Panel ', Copy(GetName(PanHandle), 3, Len(GetName(PanHandle)) - 2),' Rec');		DevType := Concat(Copy(DevType, 1, 1), 'FLink', Num2Str(0, ZoneIndex));		SetRField(PanHandle, RecName, DevType, FLinkName);				Message('End SetPanelFLink')	End;	Function AddressablePrefix(CurHandle: Handle): String;	Begin		If (KeyWord(CurHandle) = 'Smoke Detector') Then			AddressablePrefix := 'D'		Else			AddressablePrefix := 'M'	End;	Procedure SetAddressable(PreHandle, CurHandle: Handle);	Var		Prefix, PanName, RecName: String;		Zone, FLinkID: Integer;		DevHandle: Handle;	Begin		Message('Begin SetAddressable');		Zone := 0;		Prefix := AddressablePrefix(CurHandle);		If DeviceIsPanel(PreHandle) Then		Begin			PanName := GetName(PreHandle);			SetRField(CurHandle, 'Device Rec', 'Wire ID', StrDialog('Enter the Wire ID for this loop:', 'D'));			Redraw;		End		Else		Begin			PanName := GetRField(PreHandle, 'Device Rec', 'Panel');			SetRField(CurHandle, 'Device Rec', 'Wire ID', GetRField(PreHandle, 'Device Rec', 'Wire ID'))		End;		Repeat			Zone := Increment(Zone, 1);			DevHandle := GetObject((Concat(PanName, '.', Prefix, '-', Num2Str(0, Zone))));		Until(HandleIsNIL(DevHandle));		SetRField(CurHandle, 'Device Rec', 'Panel', PanName);		SetName(CurHandle, Concat(PanName, '.', Prefix, '-', Num2Str(0, Zone)));		SetRField(CurHandle, 'Device Rec', 'Name', GetName(CurHandle));		SetRField(CurHandle, 'Device Rec', 'Prefix', Prefix);		SetRField(CurHandle, 'Device Rec', 'Circuit', Num2Str(0, Zone));		SetRField(CurHandle, 'Device Rec', 'Node', '1');		SetRField(CurHandle, 'Device Rec', 'EOL', 'False');		PlaceDeviceName(CurHandle);		RecName := Concat('Panel ', Copy(PanName, 3, 1), ' Rec');		FLinkID := 0;		Repeat			FLinkID := FLinkID + 1;		Until(GetRField(GetObject(PanName), RecName, Concat('DFLink', Num2Str(0, FLinkID))) = 'NIL');		SetPanelFLink(GetObject(PanName), FLinkID, GetName(CurHandle), DeviceType(CurHandle));		Message('End SetAddressable')	End;	Procedure DoDetection(PreHandle, CurHandle: Handle);	Var		PanName, PanRecName, DevName, WireID, Prefix, FieldName, WireStyle, WireClass: String;		DevIndex, PanIndex, ZoneIndex, NumOfZones, FLinkID: Integer;		Done, AddToCircuit: Boolean;		DevHandle: Handle;	Begin		Message('Begin DoDetection');		WireID := 'D';		Prefix := 'Z';		SetRecord(CurHandle, 'Device Rec');		If Not(HandleIsNIL(PreHandle)) And EmptyName(CurHandle) Then		Begin			If DeviceIsPanel(PreHandle) Then			Begin				If Not(Addressable(CurHandle)) Then				Begin					DevIndex := 1;					SearchPanel(PreHandle, CurHandle, ZoneIndex);					DoDetectionDialogue(ZoneIndex, WireClass, WireStyle, Prefix, WireID);					SetDeviceRec(CurHandle, PreHandle, WireID, Prefix, ZoneIndex);					SetPanelFLink(PreHandle, ZoneIndex, Concat(Prefix, '-', Num2Str(0, ZoneIndex), '-', Num2Str(0, DevIndex)), DeviceType(CurHandle))				End				Else				Begin					SetAddressable(PreHandle, CurHandle);					SetPanelFLink(PreHandle, ZoneIndex, GetName(CurHandle), DeviceType(CurHandle))				End			End			Else If DeviceIsDetection(PreHandle) Then			Begin				If Not(Addressable(CurHandle)) And Not(Addressable(PreHandle)) Then				Begin					AddToCircuit := True;					If Not(DeviceTypeMatch(PreHandle, CurHandle)) Then						AddToCircuit := YNDialog('Are you sure you want to add this device to the current circuit?');					If (AddToCircuit) Then					Begin						DevIndex := Str2Num(GetRField(PreHandle, 'Device Rec', 'Node'));						ZoneIndex := Str2Num(GetRField(PreHandle, 'Device Rec', 'Circuit'));						Prefix := GetRField(PreHandle, 'Device Rec', 'Prefix');						WireID := GetRField(PreHandle, 'Device Rec', 'Wire ID');						SetDeviceRec(CurHandle, PreHandle, WireID, Prefix, ZoneIndex)					End				End				Else If Not(Addressable(CurHandle)) And Addressable(PreHandle) Then				Begin					DevIndex := 1;					ZoneIndex := 0;					Prefix := AddressablePrefix(CurHandle);					Repeat						ZoneIndex := Increment(ZoneIndex, 1);						DevHandle := GetObject(Concat(GetRField(PreHandle, 'Device Rec', 'Panel'), '.', Prefix, '-', Num2Str(0, ZoneIndex)));					Until(HandleIsNIL(DevHandle));					DoDetectionDialogue(ZoneIndex, WireClass, WireStyle, Prefix, WireID);					SetDeviceRec(CurHandle, PreHandle, WireID, Prefix, ZoneIndex);					PanName := GetRField(CurHandle, 'Device Rec', 'Panel');					PanRecName := Concat('Panel ', Copy(PanName, 3, 1), ' Rec');					FLinkID := 0;					Repeat						FLinkID := FLinkID + 1;					Until(GetRField(GetObject(PanName), PanRecName, Concat('DFLink', Num2Str(0, FLinkID))) = 'NIL');					SetPanelFLink(GetObject(PanName), FLinkID, GetName(CurHandle), DeviceType(CurHandle));					WireID := GetRField(PreHandle, 'Device Rec', 'Wire ID');				End				Else If (Addressable(CurHandle) And Not(Addressable(PreHandle))) Then					SetAddressable(PreHandle, CurHandle)				Else If (Addressable(CurHandle) And Addressable(PreHandle)) Then					SetAddressable(PreHandle,  CurHandle)			End			Else				AlrtDialog('That object cannot be added to the circuit! Choose another device or Esc to exit.');			AddWireToPath(PreHandle, CurHandle, WireID);			HaveFirstPoint := True		End;		Message('End DoDetection')	End;	Procedure SetVDropRecord(CurHandle: Handle; WireGauge, Temperature: Integer);	Begin		SetRField(CurHandle, 'VDrop Rec', 'Wire Gauge', Num2Str(0, WireGauge));		SetRField(CurHandle, 'VDrop Rec', 'Temperature', Num2Str(0, Temperature))	End;	Procedure DoSignal(PreHandle, CurHandle: Handle);	Var		PanName, PanRecName, DevName, WireID, Prefix, FieldName: String;		DevIndex, PanIndex, ZoneIndex, NumOfZones, WireGauge, Temperature: Integer;		Done: Boolean;	Begin		Message('Begin DoSignal');		WireID := 'V';		Prefix := 'SZ';		SetRecord(CurHandle, 'Device Rec');		SetRecord(CurHandle, 'VDrop Rec');		If DeviceIsPanel(PreHandle) Then		Begin			DevIndex := 1;			SearchPanel(PreHandle, CurHandle, ZoneIndex);			DoSignalDialogue(WireGauge, Temperature, ZoneIndex, Prefix, WireID);			SetVDropRecord(CurHandle, WireGauge, Temperature);			SetDeviceRec(CurHandle, PreHandle, WireID, Prefix, ZoneIndex);			SetPanelFLink(PreHandle, ZoneIndex, Concat(Prefix, '-', Num2Str(0, ZoneIndex), '-', Num2Str(0, DevIndex)), DeviceType(CurHandle));			CalculateVDrop(CurHandle);			If CheckVDrop(CurHandle) Then				AlrtDialog('Continue')		End		Else If DeviceIsSignal(PreHandle) Then		Begin			If DeviceTypeMatch(PreHandle, CurHandle) Then			Begin				DevIndex := Str2Num(GetRField(PreHandle, 'Device Rec', 'Node'));				ZoneIndex := Str2Num(GetRField(PreHandle, 'Device Rec', 'Circuit'));				WireID := GetRField(PreHandle, 'Device Rec', 'Wire ID');				Prefix := GetRField(PreHandle, 'Device Rec', 'Prefix');				WireGauge := Str2Num(GetRField(PreHandle, 'VDrop Rec', 'Wire Gauge'));				Temperature := Str2Num(GetRField(PreHandle,'VDrop Rec', 'Temperature'));				SetVDropRecord(CurHandle, WireGauge, Temperature);				SetDeviceRec(CurHandle, PreHandle, WireID, Prefix, ZoneIndex);				CalculateVDrop(CurHandle);				If CheckVDrop(CurHandle) Then					AlrtDialog('Continue')			End			Else				AlrtDialog('That object cannot be added to the circuit! Choose another device or Esc to exit.')		End		Else If DeviceIsAccessory(PreHandle) Then			AlrtDialog('That object cannot be added to the circuit! Choose another device or Esc to exit.')		Else			AlrtDialog('That object cannot be added to the circuit! Choose another device or Esc to exit.');		AddWireToPath(PreHandle, CurHandle, WireID);		HaveFirstPoint := True	End;	Procedure DoAccessory(PreHandle, CurHandle: Handle);	Begin		Message('Begin DoAccessory');			End;	Procedure ProcessInput(Var PreHandle, CurHandle: Handle; DoneWithCircuit: Boolean);	Var		CircuitIdentified: Boolean;	Begin		Message('Begin ProcessInput');		CircuitIdentified := Not(HandleIsNIL(PreHandle)) And (Round(Eval(PreHandle, (R In ['Device Rec']))) = 1);		If (PWasHit) Then			CallTool(PanTool)		Else If (CWasHit) Then			CallTool(ZoomInTool)		Else If (VWasHit) Then			CallTool(ZoomOutTool)		Else If (ZWasHit) Then			DoUndo(PreHandle, CurHandle)		Else If (ObjectsMatch(PreHandle, CurHandle)) Then		Begin			AlrtDialog('You selected the same device! Select another.');			RedrawAll		End		Else If (DeviceIsPanel(CurHandle)) Then			DoPanel(PreHandle, CurHandle)		Else If (DeviceIsDetection(CurHandle)) & (Not(DeviceIsUsed(CurHandle)) Or Addressable(CurHandle)) Then			DoDetection(PreHandle, CurHandle)		Else If (DeviceIsSignal(CurHandle)) & Not(DeviceIsUsed(CurHandle)) Then			DoSignal(PreHandle, CurHandle)		Else If (DeviceIsAccessory(CurHandle)) Then			DoAccessory(PreHandle, CurHandle)		Else if (DeviceIsUsed(CurHandle)) Then		Begin			AlrtDialog('That device is used. Remove this device from it''s current zone to use it.');			RedrawAll;			SetHandle(CurHandle, NIL)		End		Else		Begin			AlrtDialog('Could not process the input.');			RedrawAll		End	End;	Procedure EndOfLine(PreHandle: Handle; PreX, PreY: Real);	Var		EOLX, EOLY: Real;		EOLHandle: Handle;		Name: String;	Begin		GetSymLoc(PreHandle, EOLX, EOLY);		If (Round(Eval(PreHandle, (R In ['Detection Info']))) = 1) Then			Symbol('Resistor, G', EOLX, EOLY, 0)		Else			Symbol('Resistor, R', EOLX, EOLY, 0);		SetHandle(EOLHandle, LSActLayer);		SetName(EOLHandle, Concat('EOL ', GetRField(PreHandle, 'Device Rec', 'Prefix'), '-', GetRField(PreHandle, 'Device Rec', 'Circuit')));		SetRecord(EOLHandle, 'EOL Rec');		SetRField(EOLHandle, 'EOL Rec', 'Name', GetName(EOLHandle));		SetRField(EOLHandle, 'EOL Rec', 'Device', GetName(PreHandle));		TextFont(20);		TextSize(9);		TextOrigin(EOLX + 78, EOLY + 72);		BeginText;			GetName(EOLHandle)		EndText;		SetRField(PreHandle, 'Device Rec', 'EOL', 'True')	End;	Procedure PlaceConduitText(ConHandle: Handle; ConduitText: String; ConduitIsVertical: Boolean; X, Y: Real);	Var		TextHandle: Handle;	Begin		TextFont(20);		TextSize(9);		If ConduitIsVertical Then		Begin			TextJust(1);			TextVerticalAlign(3);			TextOrigin(X + 36, Y)		End		Else		Begin			TextJust(2);			TextVerticalAlign(1);			TextOrigin(X, Y - 36)		End;		BeginText;			ConduitText		EndText;		SetHandle(TextHandle, LNewObj);		SetName(TextHandle, Concat('T', Copy(ConnectorName(ConHandle), 2, Len(ConnectorName(ConHandle)) - 1)))	End;	Procedure SetConduitText(ConHandle: Handle; Var ConduitText: String);	Var		Index: Integer;		WireID: String;	Begin		ConduitText := '';		For Index := 65 To 90 Do		Begin			WireID := Chr(Index);			If Eval(ConHandle, ('Conduit Rec'.WireID)) <> 0 Then			Begin				If ConduitText <> '' Then					ConduitText := Concat(ConduitText, ', ');				ConduitText := Concat(ConduitText, Num2Str(0, Eval(ConHandle, ('Conduit Rec'.WireID))), WireID);			End		End	End;	Procedure PlaceLoop(ConHandle: Handle);	Var		Left, Top, Right, Bottom: Real;		ConText: String;		LoopHandle: Handle;	Begin		ConText := '';		GetBBox(ConHandle, Left, Top, Right, Bottom);		SetConduitText(ConHandle, ConText);		If (ConText <> '') Then		Begin			If HandleIsNIL(GetObject(Concat('L', Copy(ConnectorName(ConHandle), 2, Len(ConnectorName(ConHandle)) - 1)))) Then			Begin				If LineIsVertical(Left, Top, Right, Bottom) Then					Symbol('WireHorzLasso, G', (Right + Left) / 2, (Top + Bottom) / 2, 0)				Else					Symbol('WireVertLasso, G', (Right + Left) / 2, (Top + Bottom) / 2, 0);				SetHandle(LoopHandle, LNewObj);				SetName(LoopHandle, Concat('L', Copy(ConnectorName(ConHandle), 2, Len(ConnectorName(ConHandle)) - 1)))			End;			If Not(HandleIsNIL(GetObject(Concat('T', Copy(ConnectorName(ConHandle), 2, Len(ConnectorName(ConHandle)) - 1))))) Then			Begin				DSelectAll;				SetSelect(GetObject(Concat('T', Copy(ConnectorName(ConHandle), 2, Len(ConnectorName(ConHandle)) - 1))));				DeleteObjs			End;			PlaceConduitText(ConHandle, ConText, LineIsVertical(Left, Top, Right, Bottom), (Right + Left) / 2, (Top + Bottom) / 2)		End	End;	Procedure PlaceWireLoops(ConHandle: Handle);	Var		Index, MaxFLinks: Integer;	Begin		If ObjectIsConduit(ConHandle) And (GetRField(ConHandle, 'Conduit Rec', 'Display') = 'True') Then			PlaceLoop(ConHandle);		MaxFLinks := Str2Num(GetRField(ConHandle, 'Connector Rec', 'FLinks'));		For Index := 1 To MaxFLinks Do			If (GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index))) <> 'NIL' Then				PlaceWireLoops(GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index))))	End;	Procedure GetPoint(Var DoneWithCircuit, HaveFirstPoint: Boolean);	Begin		Redraw;		DoneWithCircuit := False;		GetUserInput(PreHandle, CurHandle, PreX, PreY, CurX, CurY, DoneWithCircuit);		If Not(DoneWithCircuit) Then		Begin			ProcessInput(PreHandle, CurHandle, DoneWithCircuit);			HaveFirstPoint := True;			DoneWithCircuit := Addressable(CurHandle)		End;		If (DoneWithCircuit) And HaveFirstPoint Then		Begin			If Not(Addressable(PreHandle)) Then				EndOfLine(PreHandle, PreX, PreY);			If DeviceIsSignal(PreHandle) Then				VDWorksheet(PreHandle)		End	End;	Procedure Initialize;	Begin		CurHandle := NIL;		PreHandle := NIL;		SetCoordinates(CurX, CurY, 0, 0);		SetCoordinates(PreX, PreY, 0, 0);		DoneWithCircuit := False;		HaveFirstPoint := False;		ZoneIndex := 0;		WireType := '*';		DevPrefix := '#';		CreateDeviceRecord;		CreateEOLRecord;		CreateVoltageDropRecord	End;	Procedure DoAddressableLoop(ConHandle: Handle; FLinks: Integer);	Var		FLinkHandle: Handle;		Index: Integer;	Begin		Message('Begin DoAddressableLoop');		If ObjectIsSymbol(ConHandle) Then			SetDeviceRec(ConHandle)		Else If ObjectIsConduit(ConHandle) Then			SetCondutRec(ConHandle);		For Index := 1 To FLinks Do			If GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL' Then			Begin				FLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)));				DoAddressableLoop(FLinkHandle)			End;		Message('End DoAddressableLoop')	End;	Procedure DoDetZone(ConHandle: Handle; DeviceKey: String);	Var	Begin		Message('Begin DoDetZone');		If ObjectIsSymbol(ConHandle) And (KeyWord(ConHandle) = DeviceKey) Then			SetDeviceRec(ConHandle)		Else If ObjectIsConduit(ConHandle) Then			SetConduitRec(ConHandle);		For Index := 1 To FLinks Do			If GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL' Then			Begin				FLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)));				DoDetZone(FLinkHandle, DeviceKey)			End;		Message('End DoDetZone')	End;	Procedure DoHardWireZones(ConHandle: Handle; Nodes: Integer; Length: Real);	Var		FLinkHandle: Handle;		FLinks, UsedFLinks, Index: Integer;	Begin		Message('Begin DoHardWireZones');		FLinks := GetRField(ConHandle, 'Connector Rec', 'FLinks');		UsedFLinks := 0;		For Index := 1 To FLinks Do			If GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL' Then				UsedFLinks := UsedFLinks + 1;		If UsedFLinks > 1 Then		Begin				End		Else If UsedFLinks = 1 Then		Begin				End		Else If UsedFLinks = 0 Then		Begin			SetDeviceRec(ConHandle)		End;		If ObjectIsSymbol(ConHandle) And Round(Eval(ConHandle, (R In ['Device Rec']))) = 0 Then			SetDeviceRec(ConHandle)		Else If ObjectIsConduit(ConHandle) Then			SetConduitRec(ConHandle);		For Index := 1 To FLinks Do			If GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL' Then			Begin				FLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)));				DoDetZone(FLinkHandle, DeviceKey)			End;		Message('End DoHardWireZones')	End;	Procedure StartPanel(PanHandle: Handle);	Var		FLinks: Integer;	Begin		Message('Begin StartPanel');		FLinks := GetRField(PanHandle, 'Connector Rec', 'FLinks');		If Addressable(PanHandle) Then			DoAddressableLoop(PanHandle, FLinks)		Else			DoHardWireZones(PanHandle, 0, 0);		Message('End StartPanel')	End;	Procedure GetPanels;	Begin		Message('Begin GetPanels');		ForEachObject(StartPanel, (R In ['Panel Info']));		Message('End GetPanels')	End;{Begin SetZones}	Procedure SetZones(ConHandle: Handle);	Var		PreHandle, PanHandle: Handle;		NodeIndex, ZoneIndex, CountIndex, MaxFLinks: Integer;		HasFLink: Boolean;	Begin		Message('Begin SetZones');	{Check to see if referenced object has at least one (1) used FLink.}		MaxFLinks := GetRField();		For CountIndex := 1 To MaxFLinks Do		Begin				End;		If (ConHandle) Then		Message('End SetZones')	End;{End SetZones}{Begin FindPathStarts}	Procedure FindPathStarts;	Begin		Message('Begin FindPathStarts');		ForEachObject(SetZones, ('Connector Rec'.'BLink' = 'NIL'));		Message('End FindPathStarts')	End;{End FindPathStarts}{Begin DetermineZonePath}	Procedure DetermineZonePath(ConHandle: Handle);	Var		FLinks, Index, Nodes, UsedFLinks, Index1, Index2: Integer;		Keyword, Keyword2: String;		BLinkHandle, LastHandle, EndHandle: Handle;		Length, TotLength, Drop, UnitValue: Real;		SortIsDone: Boolean;	Begin		Message('Begin DetermineZonePath');		Length := 0;		TotLength := 0;		Drop := 0;		Nodes := 0;	{Check to see if device has been marked as done.}		If Not(DevRecDone(ConHandle)) Then		Begin			EndHandle := ConHandle;			Keyword := GetRField(EndHandle, Concat(DeviceType(EndHandle), 'Info'), 'Keyword');		{Repeat until the device has no BLink.}			Repeat			{Check to make sure the device has a BLink to start with - could go before the repeat.}				If (GetRField(LastHandle, 'Connector Rec', 'BLink') <> 'NIL') Then				Begin					BLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', 'BLink'));				{Check to see if the referenced object is a device and if it is similar to the end device.}					If ObjectIsDevice(BLinkHandle) And KeywordMatch(EndHandle, BLinkHandle) Then					Begin						UnitValue := GetRField(LastHandle, Concat(DeviceType(LastHandle), 'Alarm1');						Drop := Drop + (Length * UnitValue);						UsedFLinks := Round(Str2Num(GetRField(BLinkHandle, 'FLink Rec', 'Used'))) + 1;						SetRField(BLinkHandle, 'FLink Rec', Concat('FLink', UsedFLinks, ' Drop'), Drop);						SetRField(BLinkHandle, 'FLink Rec', Concat('FLink', UsedFLinks, ' Name'), GetName(LastHandle));					{Sort the Flinks using a basic bubble sort - Since will only be a relatively small number of fields to sort, no need for recursion.}						For Index1 := 1 To (UsedFLinks - 1) Do						Begin							SortIsDone := True;							For Index2 := 1 To (UsedFLinks - Index1) Do							Begin								If GetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2, ' Drop')) < GetRField(BLinkHandle, 'FLinkHandle', Concat('FLink', Index2 + 1, ' Drop')) Then								Begin									Drop := GetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2, ' Drop'));									SetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2, ' Drop'), GetRField(BLinkHandle, 'FLinkHandle', Concat('FLink', Index2 + 1, ' Drop')));									SetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2 + 1, ' Drop'), Num2Str(2, Drop));									FLinkName := GetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2, ' Name'));									SetRField(BLinkHandle, 'FLink Rec', Concat('FLink', Index2, ' Name'), GetRField(BLinkHandle, 'FLinkHandle', Concat('FLink', Index2 + 1, ' Name')));									SetRField(BLinkHandle, 'FLink Rec', Concat('Name', Index2 + 1, ' Drop'), FLinkName);									SortIsDone := False								End							End;							If SortIsDone Then								Index1 := (UsedFLinks - 1)						End;					{End of the sort segment.}						LastHandle := BLinkHandle;					End				{Check to see if the references object is line defined as conduit.}					Else If ObjectIsConduit(BLinkHandle) Then					Begin						Length := Length + GetRField(BLinkHandle, 'Conduit Rec', 'Length');					End					DevKeyword := GetRField(BLinkHandle, Concat(DeviceType(BLinkHandle), 'Info'), 'Keyword');					BLinkHandle := GetRField(BLinkHandle, 'Conenctor Rec', 'BLink');				End;						Until(GetRField(LastHandle, 'Connector Rec', 'BLink') = 'NIL');		End;		Message('End DetermineZonePath')	End;{End DetermineZonePath}{Begin FindPathEnds}	Procedure FindPathEnds;	Begin		Message('Begin FindPathEnds');		ForEachObject(DoFLinkFind, ('Connector Rec'.'FLink1' = 'NIL'));		Message('End FindPathEnds')	End;{End FindPathEnds}Begin	Message('Begin AutoZones');	DSelectAll;	OriginSetup;	Setup;	Initialize;	Repeat		DoneWithCircuit := False;		HaveFirstPoint := False;		Repeat			GetPoint(DoneWithCircuit, HaveFirstPoint);		Until(DoneWithCircuit);	Until((DoneWithCircuit) And Not(HaveFirstPoint));	ForEachObject(PlaceWireLoops, ('Connector Rec'.'BLink' = 'NIL'));	DSelectAll;	Zone := 1;	Prefix := 'A';	WireID := 'B';	Message('End AutoZones')End;Run(AutoZones);