Procedure CreateConduit;Const	ConduitPrefix = 'C';	PeriodKey = 46;	DKey = 100;	PKey = 112;	EscapeKey = 27;Var{Integer Declarations}	ConduitIndex,	DeviceIndex	: Integer;{Real Declarations}	PreX,	PreY,	CurX,	CurY,	DevX,	DevY	: Real;{String Declarations}{Character Declarations}{Boolean Declarations}	KeyWasHit,	CommandWasHit,	OptionWasHit,	ShiftWasHit,	PWasHit,	DWasHit,	DoneWithRoutine,	HaveFirstPoint	: Boolean;{Handle Declarations}	PreHandle,	CurHandle,	DevHandle	: Handle;{-------------------- End Variable Section --------------------}{-------------------- Begin Include Section --------------------}{$Include ConduitLIB.vss}{-------------------- End Include Section --------------------}{-------------------- Begin Function Section --------------------}{Begin EmptyConnectorName}	Function EmptyConnectorName(TheHandle: Handle): Boolean;	Begin		Message('Begin EmptyConnectorName');		EmptyConnectorName := (ConnectorName(TheHandle) = 'NIL');		Message('End EmptyConnectorName')	End;{End EmptyConnectorName}{Begin ConnectorNameExists}	Function ConnectorNameExists(TheName: String): Boolean;	Begin		Message('Begin ConnectorNameExists');		ConnectorNameExists := Not(HandleIsNIL(GetConnector(TheName)));		Message('End ConnectorNameExists')	End;{End ConnectorNameExists}{Begin LastConnectorNumber}	Function LastConnectorNumber: Integer;	Var		HighNumber: Integer;		{Begin LastNumber}		Function LastNumber(TheLayer: String; HighNumber: Integer): Integer;		Var			ObjectHandle: Handle;			ObjectName: String;			Number: Integer;		Begin			Message('Begin LastNumber');			Layer(TheLayer);			ObjectHandle := FActLayer;			While Not(HandleIsNIL(ObjectHandle)) Do			Begin				If ConnectorIsAttached(ObjectHandle) Then				Begin					ObjectName := ConnectorName(ObjectHandle);					Number := Round(Str2Num(Copy(ObjectName, 2, Len(ObjectName) - 1)));					If (Number > HighNumber) Then						HighNumber := Number				End;				ObjectHandle := NextObj(ObjectHandle)			End;			LastNumber := HighNumber;			Message('End LastNumber')		End;	{End LastNumber}	Begin		Message('Begin LastConnectorNumber');		HighNumber := 0;		HighNumber := LastNumber('Devices', HighNumber);		HighNumber := LastNumber('Conduit', HighNumber);		LastConnectorNumber := HighNumber;		Message('End LastConnectorNumber')	End;{End LastConnectorNumber}{-------------------- End Function Section --------------------}{-------------------- Begin Procedure Section --------------------}{Begin Setup}	Procedure Setup;	Begin		Message('Begin Setup');		GridLines(48);		PenGrid(6);		PenSize(20);		PenFore(56797, 0, 0);		Message('End Setup')	End;{End Setup}{Begin GetUserInput}	Procedure GetUserInput(Var CurHandle: Handle; Var CurX, CurY: Real);	Var		GotInput: Boolean;		Left, Top, Right, Bottom: Real;		KeyHit: Integer;	Begin		Message('Begin GetUserInput');		RedrawAll;		ShiftWasHit := False;		CommandWasHit := False;		OptionWasHit := False;		GotInput := False;		SetCursor(LgCrossC);		Repeat		Until((KeyDown(KeyHit) And ((KeyHit = PeriodKey) Or (KeyHit = EscapeKey) Or (KeyHit = PKey) Or (KeyHit = DKey))) Or MouseDown(CurX, CurY));		ShiftWasHit := Shift;		CommandWasHit := Command;		OptionWasHit := Option;		PWasHit := (KeyHit = PKey);		DWasHit := (KeyHit = DKey);		DoneWithRoutine := (((KeyHit = PeriodKey) And CommandWasHit) Or (KeyHit = EscapeKey));		CurHandle := PickObject(CurX, CurY);		If Not(HandleIsNIL(CurHandle)) Then		Begin			If ObjectIsSymbol(CurHandle) Then				GetSymLoc(CurHandle, CurX, CurY)			Else				GetCenter(CurHandle, CurX, CurY)		End		Else			SnapToGrid(CurX, CurY);		Message('End GetUserInput')	End;{End GetUserInput}{Begin SetDeletedPath}	Procedure SetDeletedPath(ConHandle: Handle);	Var		Index, MaxFLinks: Integer;		Path: String;		FLinkHandle, BLinkHandle: Handle;	Begin		Message('Begin SetDeletedPath');		{BLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', 'BLink'));}		If (GetRField(ConHandle, 'Connector Rec', 'Path') <> '') Then			Path := Concat(GetRField(ConHandle, 'Connector Rec', 'Path'), GetRField(ConHandle, 'Connector Rec', 'Name'), '/')		Else			Path := Concat(GetRField(ConHandle, 'Connector Rec', 'Name'), '/');		MaxFLinks := Round(Str2Num(GetRField(ConHandle, 'Connector Rec', 'FLinks')));		For Index := 1 To MaxFLinks DO		Begin			If (GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL') Then			Begin				FLinkHandle := GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index)));				SetRField(FLinkHandle, 'Connector Rec', 'Path', Path);				SetDeletedPath(FLinkHandle);			End		End;		Message('End SetDeletedPath')	End;{End SetDeletedPath}{Begin DeleteConduit}	Procedure DeleteConduit(Var PreHandle, CurHandle: Handle; Var CurX, CurY: Real);	Var		NumOfFLinks, FLinkIndex, FNum, KeyHit: Integer;		TempX, TempY: Real;		FLinkHandle, TempHandle, BLinkHandle: Handle;		CancelDelete, ContinueDelete: Boolean;		TempName: String;	Begin		Message('Begin DeleteConduit');		CancelDelete := False;		ContinueDelete := False;		CommandWasHit := False;		SetCursor(LgCrossC);		{Pick Conduit to be deleted.}		Repeat			Repeat			Until((KeyDown(KeyHit) And ((KeyHit = PeriodKey) Or (KeyHit = EscapeKey))) Or MouseDown(TempX, TempY));			CommandWasHit := Command;			CancelDelete := (((KeyHit = PeriodKey) And CommandWasHit) Or (KeyHit = EscapeKey));			If Not(CancelDelete) Then			Begin				TempHandle := PickObject(TempX, TempY);				BLinkHandle := GetConnector(GetRField(TempHandle, 'Connector Rec', 'BLink'));				If Not(HandleIsNIL(TempHandle)) Then				Begin					ContinueDelete := YNDialog('Are you sure you want to delete this conduit?');					If ContinueDelete Then					Begin						NumOfFLinks := Round(Str2Num(GetRField(BLinkHandle, 'Connector Rec', 'FLinks')));						For FLinkIndex := 1 To NumOfFLinks Do							If (GetRField(BLinkHandle, 'Connector Rec', Concat('FLink', FLinkIndex)) = (ConnectorName(TempHandle))) Then								FNum := FLinkIndex;						For FLinkIndex := FNum To (NumOfFLinks - 1) Do							SetRField(BLinkHandle, 'Connector Rec', Concat('FLink', FNum), GetRField(BLinkHandle, 'Connector Rec', Concat('FLink', FNum + 1)));						SetRField(BLinkHandle, 'Connector Rec', Concat('FLink', FNum + 1), 'NIL');						NumOfFLinks := Round(Str2Num(GetRField(TempHandle, 'Connector Rec', 'FLinks')));						If (NumOfFLinks <> 0) Then						Begin							For FLinkIndex := 1 To NumOfFlinks Do							Begin								If (GetRField (TempHandle, 'Connector Rec', Concat('FLink', FLinkIndex))) <> 'NIL' Then								Begin									FLinkHandle:= GetConnector(GetRField(TempHandle, 'Connector Rec', Concat('FLink', FLinkIndex)));									SetRField(FLinkHandle, 'Connector Rec', 'BLink', 'NIL')								End;								SetRField(FLinkHandle, 'Connector Rec', 'Path', '');								SetDeletedPath(FLinkHandle);							End						End;						DSelectAll;						TempName := GetRField(TempHandle, 'Connector Rec', 'Name');						SelectObj('Connector Rec'.'Name' = TempName);						DeleteObjs;						SetHandle(CurHandle, BLinkHandle);						If ObjectIsSymbol(CurHandle) Then							GetSymLoc(CurHandle, CurX, CurY)						Else							GetCenter(CurHandle, CurX, CurY);						SetHandle(PreHandle, NIL)					End;				End				Else					AlrtDialog('That was not a conduit! Please choose a conduit to delete, or cancel the delete command.');			End;		Until(ContinueDelete Or CancelDelete);		Message('End DeleteConduit')	End;{End DeleteConduit}{Begin SetObjectName}	Procedure SetObjectName(ObjectHandle: Handle; ObjectName: String);	Begin		Message('Begin SetObjectName');		{SetName(ObjectHandle, ObjectName);}		If EmptyConnectorName(ObjectHandle) Then			SetRField(ObjectHandle, 'Connector Rec', 'Name', ObjectName);		Message('End SetObjectName')	End;{End SetObjectName}{Begin SetPath}	Procedure SetPath(TempHandle: Handle);	Var		FLinkHandle: Handle;		Index, MaxFLink: Integer;	Begin		Message('Begin SetPath');		MaxFLink := Round(Str2Num(GetRField(TempHandle, 'Connector Rec', 'FLinks')));		For Index := 1 To MaxFLink Do		Begin			If (GetRField(TempHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL') Then			Begin				FLinkHandle := GetConnector(GetRField(TempHandle, 'Connector Rec', Concat('FLink', Index)));				SetRField(FLinkHandle, 'Connector Rec', 'Path', Concat(GetRField(TempHandle, 'Connector Rec', 'Path'), ConnectorName(TempHandle), '/'));				SetPath(FLinkHandle)			End		End;		Message('End SetPath')	End;{End SetPath}{Begin SetCurConduitRecord}	Procedure SetCurConduitRecord(PreHandle, CurHandle: Handle);	Var		Index, MaxFLink: Integer;		FLinkHandle: Handle;	Begin		Message('Begin SetCurConduitRecord');		SetRecord(CurHandle, 'Connector Rec');		ConduitIndex := Increment(ConduitIndex, 1);		SetObjectName(CurHandle, Concat('C', Num2Str(0, ConduitIndex)));		If Not(HandleIsNIL(PreHandle)) Then		Begin			SetRField(CurHandle, 'Connector Rec', 'BLink', ConnectorName(PreHandle));			SetRField(CurHandle, 'Connector Rec', 'Path', Concat(GetRField(PreHandle, 'Connector Rec', 'Path'), ConnectorName(PreHandle), '/'))		End;		SetPath(CurHandle);		Message('End SetCurConduitRecord')	End;{End SetCurConduitRecord}{Begin SetPreConduitRecord}	Procedure SetPreConduitRecord(PreHandle, CurHandle: Handle);	Var		FLink: String;		Index: Integer;	Begin		Message('Begin SetPreConduitRecord');		Index := 0;		If Not(HandleIsNIL(PreHandle)) Then		Begin			Repeat				Index := Increment(Index, 1);				FLink := Concat('FLink', Index);			Until(GetRField(PreHandle, 'Connector Rec', FLink) = 'NIL');			SetRField(PreHandle, 'Connector Rec', FLink, ConnectorName(CurHandle))		End;		Message('End SetPreConduitRecord')	End;{End SetPreConduitRecord}{Begin DrawConduit}	Procedure DrawConduit(PreHandle: Handle; PreX, PreY, CurX, CurY: Real);	Var		ConHandle: Handle;	Begin		Message('Begin DrawConduit');		MoveTo(PreX, PreY);		LineTo(CurX, CurY);		SetHandle(ConHandle, LNewObj);		SetRecord(ConHandle, 'Conduit Rec');		SetRField(ConHandle, 'Conduit Rec', 'Length', Num2Str(0, Abs(Distance(PreX, PreY, CurX, CurY))));		If Not(ObjectIsConduit(PreHandle)) Or ((GetRField(PreHandle, 'Connector Rec', 'FLink1') <> 'NIL') | (GetRField(PreHandle, 'Connector Rec', 'FLink2') <> 'NIL') | (GetRField(PreHandle, 'Connector Rec', 'FLink1') <> 'NIL')) Then			SetRField(ConHandle, 'Conduit Rec', 'Display', 'True');		Message('End DrawConduit')	End;{End DrawConduit}{Begin ExtendConduit}	Procedure ExtendConduit(ExtendHandle: Handle; X1, Y1, X2, Y2: Real);	Begin		Message('Begin ExtendConduit');		SetSegPt1(ExtendHandle, X1, Y1);		SetSegPt2(ExtendHandle, X2, Y2);		SetRField(ExtendHandle, 'Conduit Rec', 'Length', Num2Str(0, Abs(Distance(X1, Y1, X2, Y2))));		Message('End ExtendConduit')	End;{End ExtendConduit}{Begin GetStartEnd}	Procedure GetStartEnd(PreHandle, PriorHandle: Handle; Var StartX, StartY, EndX, EndY: Real);	Var		PriorX, PriorY: Real;	Begin		Message('Begin GetStartEnd');		GetSegPt1(PreHandle, StartX, StartY);		GetSegPt2(PreHandle, EndX, EndY);		GetSegPt1(PriorHandle, PriorX, PriorY);		If CoordinatesMatch(EndX, EndY, PriorX, PriorY) Then		Begin			SetCoordinates(EndX, EndY, StartX, StartY);			SetCoordinates(StartX, StartY, PriorX, PriorY)		End		Else If Not(CoordinatesMatch(StartX, StartY, PriorX, PriorY)) Then		Begin			GetSegPt2(PriorHandle, PriorX, PriorY);			If CoordinatesMatch(EndX, EndY, PriorX, PriorY) Then			Begin				SetCoordinates(EndX, EndY, StartX, StartY);				SetCoordinates(StartX, StartY, PriorX, PriorY)			End		End;		Message('End GetStartEnd')	End;{End GetStartEnd}{Begin FixPath}	Procedure FixPath(ConHandle: Handle);	Var		PreHandle: Handle;		Index, MaxFLink: Integer;	Begin		Message('Begin FixPath');		SetHandle(PreHandle, GetConnector(GetRField(ConHandle, 'Connector Rec','BLink')));		SetRField(ConHandle, 'Connector Rec', 'Path', Concat(GetRField(PreHandle, 'Connector Rec', 'Path'), GetRField(PreHandle, 'Connector Rec', 'Name'), '/'));		MaxFLink := Str2Num(GetRField(ConHandle, 'Connector Rec', 'FLinks'));		For Index := 1 To MaxFLink Do		Begin			If Not(HandleIsNIL(GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index))))) Then				FixPath(GetConnector(GetRField(ConHandle, 'Connector Rec', Concat('FLink', Index))));		End;		Message('End FixPath')	End;{End FixPath}{Begin SplitConduit}	Procedure SplitConduit(Var PreHandle, CurHandle: Handle; StartX, StartY, EndX, EndY, CurX, CurY: Real);	Var		NewHandle: Handle;		MidX, MidY: Real;		MaxFLink, Index: Integer;	Begin		Message('Begin SplitConduit');		Wait(1);		MaxFLink := Str2Num(GetRField(PreHandle, 'Connector Rec', 'FLinks'));		If LineIsVertical(StartX, StartY,  EndX, EndY) Then			SetCoordinates(MidX, MidY, StartX, CurY)		Else			SetCoordinates(MidX, MidY, CurX, StartY);		ExtendConduit(PreHandle, StartX, StartY, MidX, MidY);		DrawConduit(PreHandle, MidX, MidY, EndX, EndY);		SetHandle(NewHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(NewHandle, 'Connector Rec');		SetRecord(NewHandle, 'Conduit Rec');		SetObjectName(NewHandle, Concat('C', Num2Str(0, ConduitIndex)));		For Index := 1 To MaxFLink Do			SetRField((NewHandle), ('Connector Rec'), (Concat('FLink', Index)), (GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index))));		For Index := 1 To MaxFLink Do			SetRField(GetConnector(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index))), 'Connector Rec', 'BLink', ConnectorName(NewHandle));		SetRField(NewHandle, 'Connector Rec', 'BLink', GetRField(PreHandle, 'Connector Rec', 'Name'));		SetRField(PreHandle, 'Connector Rec', 'FLink1', ConnectorName(NewHandle));		For Index := 2 To MaxFLink Do			SetRField(PreHandle, 'Connector Rec', Concat('FLink', Index), 'NIL');		FixPath(NewHandle);		DrawConduit(PreHandle, MidX, MidY, CurX, CurY);		SetHandle(CurHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(CurHandle, 'Connector Rec');		SetRecord(CurHandle, 'Conduit Rec');		SetObjectName(CurHandle, Concat('C', Num2Str(0, ConduitIndex)));		SetRField(CurHandle, 'Connector Rec', 'BLink', GetRField(PreHandle, 'Connector Rec', 'Name'));		SetRField(CurHandle, 'Connector Rec', 'Path', Concat(GetRField(PreHandle, 'Connector Rec', 'Path'), GetRField(PreHandle, 'Connector Rec', 'Name'), '/'));		Index := 0;		Repeat			Index := Increment(Index, 1);		Until(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) = 'NIL');		SetRField(PreHandle, 'Connector Rec', Concat('FLink', Index), ConnectorName(CurHandle));		Message('End SplitConduit')	End;{End SplitConduit}{Begin AddToCurConduit}	Procedure AddToCurConduit(Var PreHandle, CurHandle: Handle; StartX, StartY, EndX, EndY, CurX, CurY: Real);	Var		NewHandle: Handle;		MidX, MidY: Real;		Index: Integer;	Begin		Message('Begin AddToCurConduit');		Wait(1);		If LineIsVertical(StartX, StartY, EndX, EndY) Then			SetCoordinates(MidX, MidY, EndX, CurY)		Else			SetCoordinates(MidX, MidY, CurX, EndY);		DrawConduit(PreHandle, EndX, EndY, MidX, MidY);		SetHandle(NewHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(NewHandle, 'Connector Rec');		SetRecord(NewHandle, 'Conduit Rec');		SetObjectName(NewHandle, Concat('C', Num2Str(0, ConduitIndex)));		SetRField(NewHandle, 'Connector Rec', 'BLink', ConnectorName(PreHandle));		Index := 0;		Repeat			Index := Increment(Index, 1);		Until(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) = 'NIL');		SetRField(PreHandle, 'Connector Rec', Concat('FLink', Index), ConnectorName(NewHandle));		DrawConduit(PreHandle, MidX, MidY, CurX, CurY);		SetHandle(CurHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(CurHandle, 'Connector Rec');		SetRecord(CurHandle, 'Conduit Rec');		SetObjectName(CurHandle, Concat('C', Num2Str(0, ConduitIndex)));		SetRField(CurHandle, 'Connector Rec', 'BLink', ConnectorName(NewHandle));		Index := 0;		Repeat			Index := Increment(Index, 1);		Until(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) = 'NIL');		SetRField(NewHandle, 'Connector Rec', Concat('FLink', Index), ConnectorName(CurHandle));		Message('End AddToCurConduit')	End;{End AddToCurConduit}{Begin AddToPriorConduit}	Procedure AddToPriorConduit(Var PreHandle, CurHandle: Handle; StartX, StartY, EndX, EndY, CurX, CurY: Real);	Var		PriorHandle, NewHandle: Handle;		MidX, MidY: Real;		Index: Integer;	Begin		Message('Begin AddToPriorConduit');		Wait(1);		SetHandle(PriorHandle, GetConnector(GetRField(PreHandle, 'Connector Rec', 'BLink')));		If LineIsVertical(StartX, StartY, EndX, EndY) Then			SetCoordinates(MidX, MidY, StartX, CurY)		Else			SetCoordinates(MidX, MidY, CurX, StartY);		DrawConduit(PreHandle, StartX, StartY, MidX, MidY);		SetHandle(NewHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(NewHandle, 'Connector Rec');		SetRecord(NewHandle, 'Conduit Rec');		SetObjectName(NewHandle, Concat('C', Num2Str(0, ConduitIndex)));		SetRField(NewHandle, 'Connector Rec', 'BLink', ConnectorName(PriorHandle));		Index := 0;		Repeat			Index := Increment(Index, 1);		Until(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) = 'NIL');		SetRField(PriorHandle, 'Connector Rec', Concat('FLink', Index), ConnectorName(NewHandle));		DrawConduit(PreHandle, MidX, MidY, CurX, CurY);		SetHandle(CurHandle, LNewObj);		ConduitIndex := Increment(ConduitIndex, 1);		SetRecord(CurHandle, 'Connector Rec');		SetRecord(CurHandle, 'Conduit Rec');		SetObjectName(CurHandle, Concat('C', Num2Str(0, ConduitIndex)));		SetRField(CurHandle, 'Connector Rec', 'BLink', ConnectorName(NewHandle));		Index := 0;		Repeat			Index := Increment(Index, 1);		Until(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) = 'NIL');		SetRField(NewHandle, 'Connector Rec', Concat('FLink', Index), ConnectorName(CurHandle));		Message('End AddToPriorConduit')	End;{End AddToPriorConduit}{Begin MoveToPoint}	Procedure MoveToPoint(Var CurHandle: Handle; Var CurX, CurY: Real);	Var		TempHandle: Handle;		TempX, TempY: Real;		DoneWithProcedure: Boolean;		KeyHit: Integer;	Begin		Message('Begin MoveToPoint');		Repeat		Until((KeyDown(KeyHit) And ((KeyHit = PeriodKey) Or (KeyHit = EscapeKey))) Or MouseDown(TempX, TempY));		CommandWasHit := Command;		DoneWithProcedure := (((KeyHit = PeriodKey) And CommandWasHit) Or (KeyHit = EscapeKey));		If Not(DoneWithProcedure) Then		Begin			TempHandle := PickObject(TempX, TempY);			If Not(HandleIsNIL(TempHandle)) Then			Begin				If ObjectIsSymbol(TempHandle) Then				Begin					GetSymLoc(TempHandle, TempX, TempY);					If Round(Eval(TempHandle, (R In ['Connector Rec']))) = 0 Then						SetCurConduitRecord(NIL, TempHandle)				End				Else					GetCenter(TempHandle, TempX, TempY)			End			Else				SnapToGrid(TempX, TempY);			SetHandle(CurHandle, TempHandle);			SetCoordinates(CurX, CurY, TempX, TempY)		End;		Message('End MoveToPoint')	End;{End MoveToPoint}{Begin FromConduit}	Procedure FromConduit(Var PreHandle, CurHandle: Handle; Var CurX, CurY, SX, SY, EX, EY: Real);	Var		PriorHandle: Handle;		L, T, R, B, MidX, MidY: Real;		MaxFLink, Index: Integer;		HasFLink: Boolean;	Begin		Message('Begin FromConduit');		SetLeftRight(L, R, SX, EX);		SetTopBottom(T, B, SY, EY);	{Get the object prior to the object referenced by PreHandle.}		SetHandle(PriorHandle, GetConnector(GetRField(PreHandle, 'Connector Rec', 'BLink')));	{See if any of the next objects are devices.}	{Find the start and end coordinates for the conduit referenced by PreHandle.}		GetStartEnd(PreHandle, PriorHandle, SX, SY, EX, EY);	{Is PreHandle pointing to last created conduit?}		MaxFLink := Round(Str2Num(GetRField(PreHandle, 'Connector Rec', 'FLinks')));		HasFLink := False;		For Index := 1 To MaxFLink Do			If GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index)) <> 'NIL' Then				HasFLink := True;		If (PreHandle <> LNewObj) And (HasFLink) And		((((CurX < L) Or (CurX > R)) And Not(LineIsVertical(SX, SY, EX, EY))) Or (((CurY < B) Or (CurY > T)) And LineIsVertical(SX, SY, EX, EY))) Then		Begin			If ((((Abs(CurX - SX) > Abs(CurX - EX)) And Not(LineIsVertical(SX, SY, EX, EY))) |			((Abs(CurY - SY) > Abs(CurY - EY)) And (LineIsVertical(SX, SY, EX, EY))))) Then				AddToCurConduit(PreHandle, CurHandle, SX, SY, EX, EY, CurX, CurY)			Else If ((((Abs(CurX - SX) < Abs(CurX - EX)) And Not(LineIsVertical(SX, SY, EX, EY))) |			((Abs(CurY - SY) < Abs(CurY - EY)) And (LineIsVertical(SX, SY, EX, EY))))) Then				AddToPriorConduit(PreHandle, CurHandle, SX, SY, EX, EY, CurX, CurY)		End	{Is the (CurX, CurY) splitting the conduit referenced by PreHandle.}		Else If (((CurX > L) And (CurX < R)) Or ((CurY > B) And (CurY < T))) And (GetRField(PreHandle, 'Connector Rec', 'FLink1') <> 'NIL') Then			SplitConduit(PreHandle, CurHandle, SX, SY, EX, EY, CurX, CurY)		Else		Begin			SetCoordinates(MidX, MidY, EX, EY);			If LineIsAngled(SX, SY, EX, EY) Then			Begin				If LineIsVertical(EX, EY, CurX, CurY) Then					SetCoordinates(MidX, MidY, CurX, EY)				Else					SetCoordinates(MidX, MidY, EX, CurY)			End			Else If Not(ShiftWasHit) Then			Begin				If LineIsVertical(SX, SY, EX, EY) Then					SetCoordinates(MidX, MidY, SX, CurY)				Else					SetCoordinates(MidX, MidY, CurX, SY)			End;			If Not(ShiftWasHit) Then				ExtendConduit(PreHandle, SX, SY, MidX, MidY);			For Index := 1 To MaxFLink Do				SetRField(GetConnector(GetRField(PreHandle, 'Connector Rec', Concat('FLink', Index))), 'Conduit Rec', 'Display', 'True');			DrawConduit(PreHandle, MidX, MidY, CurX, CurY);			SetHandle(CurHandle, LNewObj);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle)		End;		Message('End FromConduit')	End;{End FromConduit}{Begin ConduitToPoint}	Procedure ConduitToPoint(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real);	Var		StartX, StartY, EndX, EndY: Real;	Begin		Message('Begin ConduitToPoint');		GetSegPt1(PreHandle, StartX, StartY);		GetSegPt2(PreHandle, EndX, EndY);		FromConduit(PreHandle, CurHandle, CurX, CurY, StartX, StartY, EndX, EndY);		Message('End ConduitToPoint')	End;{End ConduitToPoint}{Begin ConduitToDevice}	Procedure ConduitToDevice(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real);	Var		DevHandle: Handle;		StartX, StartY, EndX, EndY: Real;	Begin		Message('Begin ConduitToDevice');		SetHandle(DevHandle, CurHandle);		GetBBox(PreHandle, StartX, StartY, EndX, EndY);		FromConduit(PreHandle, CurHandle, CurX, CurY, StartX, StartY, EndX, EndY);		SetHandle(PreHandle, CurHandle);		SetHandle(CurHandle, DevHandle);		SetCurConduitRecord(PreHandle, DevHandle);		SetPreConduitRecord(PreHandle, DevHandle);		Message('End ConduitToDevice')	End;{End ConduitToDevice}{Begin DeviceToPoint - Done}	Procedure DeviceToPoint(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real);	Begin		Message('Begin DeviceToPoint');		If Not(ShiftWasHit) Then		Begin			If LineIsVertical(PreX, PreY, CurX, CurY) Then				SetCoordinates(CurX, CurY, PreX, CurY)			Else				SetCoordinates(CurX, CurY, CurX, PreY)		End;		DrawConduit(PreHandle, PreX, PreY, CurX, CurY);		SetHandle(CurHandle, LNewObj);		SetCurConduitRecord(PreHandle, CurHandle);		SetPreConduitRecord(PreHandle, CurHandle);		Message('End DeviceToPoint')	End;{End DeviceToPoint - Done}{Begin DeviceToDevice - Done}	Procedure DeviceToDevice(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real);	Begin		Message('Begin DeviceToDevice');		SetHandle(DevHandle, CurHandle);		SetCoordinates(DevX, DevY, CurX, CurY);		If ShiftWasHit | (PreX = CurX) | (PreY = CurY) Then		Begin			{Draw a straight line between the 2 devices.}			DrawConduit(PreHandle, PreX, PreY, CurX, CurY);			SetHandle(CurHandle, LNewObj);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle);			SetHandle(PreHandle, CurHandle);			SetHandle(CurHandle, DevHandle);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle)		End		Else If (OptionWasHit) | Not(YNDialog('Would you like to choose the path between the devices?')) Then		Begin			{Draw 2 lines between the 2 devices.}			If (Not(OptionWasHit) And LineIsVertical(PreX, PreY, CurX, CurY)) Or (OptionWasHit And Not(LineIsVertical(PreX, PreY, CurX, CurY))) Then				{Draw the first line vertically.}				SetCoordinates(CurX, CurY, CurX, PreY)			Else				{Draw the first line horizontally.}				SetCoordinates(CurX, CurY, PreX, CurY);			{Draw the second line perpendicular to the first line.}			DrawConduit(PreHandle, PreX, PreY, CurX, CurY);			SetHandle(CurHandle, LNewObj);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle);			SetHandle(PreHandle, CurHandle);			SetCoordinates(PreX, PreY, CurX, CurY);			SetCoordinates(CurX, CurY, DevX, DevY);			DrawConduit(PreHandle, PreX, PreY, CurX, CurY);			SetHandle(CurHandle, LNewObj);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle);			SetHandle(PreHandle, CurHandle);			SetHandle(CurHandle, DevHandle);			SetCurConduitRecord(PreHandle, CurHandle);			SetPreConduitRecord(PreHandle, CurHandle)		End		Else		Begin			SetHandle(CurHandle, PreHandle);			SetCoordinates(CurX, CurY, PreX, PreY)		End;		Message('End DeviceToDevice')	End;{End DeviceToDevice - Done}{Begin ProcessInput}	Procedure ProcessInput(Var PreHandle, CurHandle: Handle; Var PreX, PreY, CurX, CurY: Real);	Begin		Message('Begin ProcessInput');		If (PWasHit) Then		Begin			SetHandle(PreHandle, NIL);			SetHandle(CurHandle, NIL);			MoveToPoint(CurHandle, CurX, CurY)		End		Else If (DWasHit) Then		Begin			DeleteConduit(PreHandle, CurHandle, CurX, CurY);		End		Else If (CoordinatesMatch(PreX, PreY, CurX, CurY)) Then			AlrtDialog('You selected the same point! Select another.')		Else If (ObjectIsConduit(PreHandle)) Then		Begin			If (HandleIsNIL(CurHandle)) Then				ConduitToPoint(PreHandle, CurHandle, PreX, PreY, CurX, CurY)			Else			If (ObjectIsSymbol(CurHandle)) Then				ConduitToDevice(PreHandle, CurHandle, PreX, PreY, CurX, CurY)		End		Else If (ObjectIsSymbol(PreHandle)) Then		Begin			If (HandleIsNIL(CurHandle)) Then				DeviceToPoint(PreHandle, CurHandle, PreX, PreY, CurX, CurY)			Else			If (ObjectIsSymbol(CurHandle)) Then				DeviceToDevice(PreHandle, CurHandle, PreX, PreY, CurX, CurY)			Else				AlrtDialog('You cannot go from a device to a conduit.')		End		Else			AlrtDialog('Could not process the input.');		Message('End ProcessInput')	End;{End ProcessInput}{Begin GetPoint}	Procedure GetPoint;	Begin		Message('Begin GetPoint');		GetUserInput(CurHandle, CurX, CurY);		If Not(DoneWithRoutine) And (HaveFirstPoint) Then			ProcessInput(PreHandle, CurHandle, PreX, PreY, CurX, CurY)		Else			SetCurConduitRecord(PreHandle, CurHandle);		SetHandle(PreHandle, CurHandle);		SetCoordinates(PreX, PreY, CurX, CurY);		HaveFirstPoint := True;		Message('End GetPoint')	End;{End GetPoint}{Begin Initialize}	Procedure Initialize;	Begin		Message('Begin Initialize');		CurHandle := NIL;		PreHandle := NIL;		SetCoordinates(CurX, CurY, 0, 0);		SetCoordinates(PreX, PreY, 0, 0);		DoneWithRoutine := False;		HaveFirstPoint := False;		ConduitIndex := LastConnectorNumber;		Message('End Initialize')	End;{End Initialize}{-------------------- End Procedure Section --------------------}{-------------------- Begin Main Section --------------------}Begin	Message('Begin CreateConduit');	OriginSetup;	Setup;	Initialize;	CreateConnectorRecord;	While Not(DoneWithRoutine) Do		GetPoint;	FindIntersections;	Message('End CreateConduit')End;{-------------------- End Main Section --------------------}Run(CreateConduit);